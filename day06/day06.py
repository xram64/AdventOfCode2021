## Advent of Code 2021: Day 6
## https://adventofcode.com/2021/day/6
## Jesse Williams | github.com/xram64
## Answers: [Part 1]: , [Part 2]:

from time import time

DAYS_PART1 = 26
DAYS_PART2 = 256

def advance(age):
    # Returns a tuple with the new age of the current fish, followed by the
    #   age of a new fish if one should be spawned (otherwise, None)
    if age > 0:
        return (fish - 1, None)
    else:
        return (6, 8)

def count_spawns(age, remaining_days):
    # Returns the number of additional fish generated by a given fish, based on its initial age
    #   and the number of days left until the end of the simulation

    # 15 days left and age 0:
    #  (0), 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 0, 6  -- [3] --  (15-(0+1))/7 + 1 = 2 + 1 = 3

    # 15 days left and age 1:
    #  (1), 0, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 0  -- [2] --  (15-(1+1))/7 + 1 = 2 + 1 = 3

    # 15 days left and age 2:
    #  (2), 1, 0, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1  -- [2] --  (15-(2+1))/7 + 1 = 1 + 1 = 2

    # 15 days left and age 6:
    #  (6), 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 0, 6, 5  -- [2] --  (15-(6+1))/7 + 1 = 1 + 1 = 2

    # 15 days left and age 7:
    #  (7), 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 0, 6  -- [2] --  (15-(7+1))/7 + 1 = 1 + 1 = 2

    # 15 days left and age 8:
    #  (8), 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 0  -- [1] --  (15-(8+1))/7 + 1 = 1 + 1 = 2

    # [256]
    # 253 = 256 - 3 = 256 - (2+1)
    # 244 = 256 - 3 - 9     = 253 - 9 = 253 - (8+1)                       = 253 - 1*(8+1)
    # 235 = 256 - 3 - 9 - 9 = 244 - 9 = 244 - (8+1) = 253 - (8+1) - (8+1) = 253 - 2*(8+1)

    # Keep track of the number of spawns seen at this level of the function.
    # This will be passed up to the previous level to be added to the grand total.
    total_spawns = 0

    if remaining_days > age:
        # If this fish will spawn at least one additional fish, calculate how many will be spawned in total.
        fish_spawned = int( (remaining_days - (age+1))/7 + 1 )
        # https://www.desmos.com/calculator/lumde55zpk
    else:
        # Otherwise, end the recursion by passing back 0 (the for loop will be skipped)
        fish_spawned = 0

    total_spawns += fish_spawned
    ##########print(f"[TOP LEVEL] Initial fish age: {age}  |  Days: {remaining_days}  |  Count = {total_spawns}")

    # If we got at least one spawn, run this function again on each new fish
    for n in range(1, fish_spawned+1):
        if (n == 1):
            # If this is the first fish spawned by the given fish, use the given fish's
            #   starting age to determine how long it takes the next fish to spawn.
            # For initial fish, age âˆˆ [1,5]. For spawned fish, age = 8.
            new_fish_days = remaining_days - (age+1)
        else:
            # If the given fish has already spawned one fish, the second or later
            #   fish should always spawn after a multiple of 7 (6+1) days.
            new_fish_days = remaining_days - n*(6+1)

        # A spawned fish will have an initial age of 8 (zero-indexed)
        total_spawns += count_spawns(8, new_fish_days)
        ########print(f"[INNER LEVEL] Initial fish age: {age}  |  Days: {new_fish_days}  |  Count = {total_spawns}")

    return total_spawns


if __name__ == '__main__':
    with open('test_input.txt', 'r') as f:
        fishesz = f.readline().split(',')
        fish_list = [int(fish) for fish in fishesz]

    t_start = time()

    ## Part 1
    day = 0  # initial state
    fishes = fish_list.copy()

    for day in range(DAYS_PART1):
        print(fishes)  #############
        new_fishes = []

        for i, fish in enumerate(fishes):
            fish, new_fish = advance(fish)
            fishes[i] = fish
            if new_fish:
                new_fishes.append(new_fish)

        fishes.extend(new_fishes)
    print(fishes)  ###########

    print(f"[Part 1] After 80 days, there are {len(fishes)} lanternfish. [Took {round(time() - t_start, 2)}s]")


    ## Part 2
    full_count = 0
    fishes = fish_list.copy()

    # For each fish, calculate the number of "roll-overs" the age would take within 256 days,
    #   which would give the total number of new fish spawned by the given fish
    # Then, recursively calculate the same for each descendant fish to get a total for the given fish

    for fish in fishes:
        full_count += count_spawns(fish, DAYS_PART1)+1  #### Seems to work better when we add 1 but still diverges?? #################

    ##### The above change seems to fix one of two problems
    # This adjusts the count for the initial fish we start with, so multiple fish with a small number of days works
    # But, a single initial fish still diverges for a large number of days
    # So, there must be a problem with the recurive total itself



    #### TESTING: SHOULD MATCH PART 1 ANSWER #################
    print(f"[Part 2] After **80** days, there are {full_count} lanternfish. [Took {round(time() - t_start, 2)}s]")
