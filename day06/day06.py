## Advent of Code 2021: Day 6
## https://adventofcode.com/2021/day/6
## Jesse Williams | github.com/xram64
## Answers: [Part 1]: 390011, [Part 2]: 1746710169834

from time import time

DAYS_PART1 = 80
DAYS_PART2 = 256

def advance(age):
    # Returns a tuple with the new age of the current fish, followed by the
    #   age of a new fish if one should be spawned (otherwise, None)
    if age > 0:
        return (fish - 1, None)
    else:
        return (6, 8)

def count_spawns(age, remaining_days):
    # Returns the number of additional fish generated by a given fish, based on its initial age
    #   and the number of days left until the end of the simulation.

    # Keep track of the number of spawns seen at this level of the function.
    # This will be passed up to the previous level to be added to the grand total.
    total_spawns = 0

    # Pre-calculate common expression
    this_fish_remaining_days = remaining_days - (age+1)

    if remaining_days > age:
        # If this fish will spawn at least one additional fish, calculate how many will be spawned in total.
        # https://www.desmos.com/calculator/lumde55zpk
        fish_spawned = int( this_fish_remaining_days/7 + 1 )
        total_spawns += fish_spawned
    else:
        # Otherwise, end the recursion by passing back 0 (the for loop will be skipped).
        fish_spawned = 0

    # If this is the first fish spawned by the given fish, use the given fish's
    #   starting age to determine how long it takes the next fish to spawn.
    # If the given fish has already spawned one fish, the second or later
    #   fish should always spawn after a multiple of 7 (6+1) days.
    # For initial fish, age âˆˆ [1,5]. For spawned fish, age = 8.

    # If we got at least one spawn, run this function again on each new fish.
    for n in range(fish_spawned):
        next_fish_remaining_days = this_fish_remaining_days - 7*n

        # A spawned fish will have an initial age of 8 (zero-indexed).
        total_spawns += count_spawns(8, next_fish_remaining_days)

    return total_spawns


if __name__ == '__main__':
    with open('day06_input.txt', 'r') as f:
        fishesz = f.readline().split(',')
        fish_list = [int(fish) for fish in fishesz]

    t_start = time()

    ## Part 1
    day = 0  # initial state
    fishes = fish_list.copy()

    for day in range(DAYS_PART1):
        new_fishes = []

        for i, fish in enumerate(fishes):
            fish, new_fish = advance(fish)
            fishes[i] = fish
            if new_fish:
                new_fishes.append(new_fish)

        fishes.extend(new_fishes)

    print(f"[Part 1] After 80 days, there are {len(fishes)} lanternfish. [Took {round(time() - t_start, 2)}s]")


    ## Part 2
    full_count = 0
    fishes = fish_list.copy()
    i = 0

    # For each fish, calculate the number of "roll-overs" the age would take within 256 days,
    #   which would give the total number of new fish spawned by the given fish.
    # Then, recursively calculate the same for each descendant fish to get a total for the given fish.
    for fish in fishes:
        # Add up all descendants of this fish recursively (+1 to include this fish itself)
        full_count += count_spawns(fish, DAYS_PART2) + 1

        i += 1
        print(f"Fish #{i} (initial value {fish}) done. Now at {full_count} total fish...")


    print(f"[Part 2] After 256 days, there are {full_count} lanternfish. [Took {round(time() - t_start, 2)}s]")
